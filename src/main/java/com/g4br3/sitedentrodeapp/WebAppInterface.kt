package com.g4br3.sitedentrodeapp

import android.content.Context
import android.net.Uri
import android.os.Build
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.webkit.JavascriptInterface
import android.webkit.WebView
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.documentfile.provider.DocumentFile
import com.g4br3.sitedentrodeapp.components.Info

import com.g4br3.sitedentrodeapp.components.UriList
import org.json.JSONObject

var uriList: UriList = UriList()
/**
 * Interface entre o JavaScript da WebView e o c√≥digo nativo Android.
 * Permite executar fun√ß√µes Kotlin diretamente do JavaScript.
 *
 * @param context Contexto da Activity.
 * @param webView Refer√™ncia para a WebView que executa os comandos.
 * @param abrirPastaCallback Callback para abrir o seletor de pastas.
 */
class WebAppInterface(
    private val context: Context,
    private val webView: WebView,
    private val abrirPastaCallback: () -> Unit,
    private val abrirPasrtasCallback: (name: String, on_selected: (Uri) -> Unit)-> Unit,
    val listarArquivos: (() -> Unit)?
) {
    private var info = Info(context)
    /** URI da pasta selecionada, atualizada pela MainActivity */
    var selectedFolderUri: Uri? = null
        set(value) {
            field = value
            Log.d(TAG, "selectedFolderUri atualizada: $value")
        }

    var viewPageLoaded = false
        set(value) {
            field = value
            Log.d(TAG, "viewPageLoaded alterado para: $value")
        }

    private val TAG = "WebAppInterface"

    init {
        Log.i(TAG, "üîß WebAppInterface: Inicializando interface JavaScript")
        Log.d(TAG, "WebAppInterface inicializada com sucesso")
        Log.d(TAG, "Context: ${context.javaClass.simpleName}")
        Log.d(TAG, "WebView: ${webView.javaClass.simpleName}")
        Log.d(TAG, "AbrirPastaCallback: ${if (abrirPastaCallback != null) "Configurado" else "N√£o configurado"}")
        Log.d(TAG, "AbrirArquivoCallback: ${if (abrirPasrtasCallback != null) "Configurado" else "N√£o configurado"}")
        Log.d(TAG, "ListarArquivos: ${if (listarArquivos != null) "Configurado" else "N√£o configurado"}")
    }

    @JavascriptInterface
    fun abrirArquivo(name: String) {
        Log.d(TAG, "üìÑ abrirArquivo chamado com par√¢metro: '$name'")
        // TODO: Implementar l√≥gica
        Log.w(TAG, "abrirArquivo n√£o implementado - callback comentado")
        //abrirArquivoCallback(name)
    }

    @JavascriptInterface
    fun filesString() {
        Log.d(TAG, "üìã filesString() chamado")
        // TODO: Implementar l√≥gica
        Log.w(TAG, "filesString n√£o implementado - c√≥digo comentado")
        //webView.evaluateJavascript("receberListaDeNomesHTML([${webFiles.webListName.value},${webFiles.webHtmlViewName.value}])", null)
    }

    @JavascriptInterface
    fun set_home(file: String){
        Log.d(TAG, "üè† set_home chamado com par√¢metro: '$file'")
        println(file)
    }

    /** Escapa string para ser segura dentro de JavaScript inline */
    private fun escaparParaJavascript(codigo: String): String {
        Log.v(TAG, "üîÑ Escapando c√≥digo JavaScript (${codigo.length} caracteres)")
        val resultado = codigo
            .replace("\\", "\\\\")
            .replace("'", "\\'")
            .replace("\"", "\\\"")
            .replace("\n", "\\n")
            .replace("\r", "")
        Log.v(TAG, "‚úÖ C√≥digo JavaScript escapado com sucesso")
        return resultado
    }

    /** Injeta c√≥digo JavaScript diretamente na WebView, com escape autom√°tico */
    @JavascriptInterface
    fun injetarJavascript(codigo: String) {
        Log.d(TAG, "üíâ injetarJavascript chamado com c√≥digo de ${codigo.length} caracteres")
        Log.v(TAG, "C√≥digo recebido: $codigo")
        // TODO: Implementar l√≥gica
        Log.w(TAG, "injetarJavascript n√£o implementado - c√≥digo comentado")
//        val codigoSeguro = escaparParaJavascript(codigo)
//        webView.post {
//            webView.evaluateJavascript(codigoSeguro, null)
//        }
    }

    @JavascriptInterface
    fun listarArquivos(){
        Log.d(TAG, "üìÅ listarArquivos() chamado do JavaScript")
        webView.post {
            Log.d(TAG, "Executando callback listarArquivos")
            listarArquivos?.invoke()
        }
    }

    /** Fun√ß√£o chamada do JavaScript para solicitar um nome. */
    @JavascriptInterface
    fun pegarNome() {
        Log.d(TAG, "üë§ pegarNome() chamado")
        Toast.makeText(context, "Android recebeu pedido de nome", Toast.LENGTH_SHORT).show()
        val nome = "Gabriel"
        Log.d(TAG, "Enviando nome '$nome' para JavaScript")
        webView.post {
            Log.d(TAG, "Executando JavaScript: receberNome('$nome')")
            webView.evaluateJavascript("receberNome('$nome')", null)
        }
    }

    /**
     * M√©todo JavaScript para abrir o seletor de pasta.
     *
     * Este m√©todo √© chamado do JavaScript e aciona o callback
     * para abrir o seletor de pasta do Android.
     */
    @JavascriptInterface
    fun abrirPasta() {
        Log.i(TAG, "üìÅ WebAppInterface: Solicita√ß√£o para abrir pasta recebida")
        Log.d(TAG, "M√©todo abrirPasta() chamado do JavaScript")
        try {
            abrirPastaCallback()
            Log.d(TAG, "Callback abrirPasta executado com sucesso")
        } catch (e: Exception) {
            Log.e(TAG, "Erro ao executar callback abrirPasta", e)
        }
    }

    /** salvar uri de pasta com modulos externos da interface */
    @JavascriptInterface
    fun setExternModels(){
        Log.i(TAG, "selecionando modulo externo")
        abrirPasrtasCallback(uriList.externalModulejs.key){
            Log.i(TAG, " modulo externo selected")
        }

    }
    @RequiresApi(Build.VERSION_CODES.P)
    @JavascriptInterface
    fun getAllInfo():String{
      return JSONObject(this.info.all).toString()

    }
    /** Fun√ß√£o chamada do JavaScript para ler o conte√∫do de um arquivo da pasta. */
    @JavascriptInterface
    fun lerArquivo(caminhoRelativo: String) {
        Log.i(TAG, "üìñ lerArquivo chamado com caminho: '$caminhoRelativo'")

        selectedFolderUri?.let { baseUri ->
            Log.d(TAG, "URI da pasta base: $baseUri")

            try {
                val arquivo = localizarArquivoPorCaminho(baseUri, caminhoRelativo)
                if (arquivo != null && arquivo.isFile) {
                    Log.d(TAG, "Arquivo encontrado: ${arquivo.name}, URI: ${arquivo.uri}")

                    val inputStream = context.contentResolver.openInputStream(arquivo.uri)
                    val conteudo = inputStream?.bufferedReader().use { it?.readText() } ?: "Erro ao ler arquivo"
                    Log.d(TAG, "Conte√∫do do arquivo lido: ${conteudo.length} caracteres")

                    val conteudoEscapado = conteudo
                        .replace("\\", "\\\\")
                        .replace("'", "\\'")
                        .replace("\n", "\\n")
                        .replace("\r", "")
                    Log.v(TAG, "Conte√∫do escapado para JavaScript")

                    webView.post {
                        if (viewPageLoaded) {
                            Log.d(TAG, "P√°gina carregada, executando mostrarConteudo imediatamente")
                            webView.evaluateJavascript("mostrarConteudo('$conteudoEscapado')", null)
                        } else {
                            Log.w(TAG, "P√°gina n√£o carregada, tentando novamente em 300ms")
                            // Tenta novamente ap√≥s atraso
                            Handler(Looper.getMainLooper()).postDelayed({
                                Log.d(TAG, "Executando mostrarConteudo ap√≥s delay")
                                webView.evaluateJavascript("mostrarConteudo('$conteudoEscapado','$caminhoRelativo')", null)
                            }, 300)
                        }
                    }
                } else {
                    Log.w(TAG, "Arquivo n√£o encontrado ou n√£o √© um arquivo v√°lido: '$caminhoRelativo'")
                    webView.post {
                        Log.d(TAG, "Enviando mensagem de erro para JavaScript")
                        webView.evaluateJavascript("mostrarConteudo('Arquivo n√£o encontrado')", null)
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "Erro ao ler arquivo '$caminhoRelativo'", e)
                webView.post {
                    webView.evaluateJavascript("mostrarConteudo('Erro ao ler arquivo: ${e.message}')", null)
                }
            }
        } ?: run {
            Log.w(TAG, "selectedFolderUri √© null - nenhuma pasta selecionada")
            webView.post {
                webView.evaluateJavascript("mostrarConteudo('Nenhuma pasta selecionada')", null)
            }
        }
    }

    /** Percorre recursivamente a √°rvore DocumentFile para localizar um arquivo por caminho relativo. */
    private fun localizarArquivoPorCaminho(baseUri: Uri, caminhoRelativo: String): DocumentFile? {
        Log.d(TAG, "üîç Localizando arquivo por caminho: '$caminhoRelativo'")
        Log.d(TAG, "URI base: $baseUri")

        try {
            val partes = caminhoRelativo.split("/")
            Log.d(TAG, "Caminho dividido em ${partes.size} partes: ${partes.joinToString(" -> ")}")

            var atual: DocumentFile? = DocumentFile.fromTreeUri(context, baseUri)
            Log.d(TAG, "DocumentFile raiz criado: ${atual?.name}")

            for ((index, parte) in partes.withIndex()) {
                Log.v(TAG, "Procurando parte $index: '$parte'")

                val arquivos = atual?.listFiles()
                Log.v(TAG, "Arquivos na pasta atual: ${arquivos?.size ?: 0}")

                atual = arquivos?.firstOrNull { it.name == parte }

                if (atual == null) {
                    Log.w(TAG, "Parte '$parte' n√£o encontrada na pasta atual")
                    break
                } else {
                    Log.d(TAG, "Parte '$parte' encontrada: ${atual.name} (${if (atual.isDirectory) "pasta" else "arquivo"})")
                }
            }

            if (atual != null) {
                Log.i(TAG, "‚úÖ Arquivo localizado com sucesso: ${atual.name}")
            } else {
                Log.w(TAG, "‚ùå Arquivo n√£o encontrado: '$caminhoRelativo'")
            }

            return atual
        } catch (e: Exception) {
            Log.e(TAG, "Erro ao localizar arquivo '$caminhoRelativo'", e)
            return null
        }
    }
}